{
    "sourceFile": "app/Http/Controllers/ContactController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1739721890276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739721930460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+<?php\n+\n namespace App\\Http\\Controllers;\n \n use App\\Models\\Contact;\n use Illuminate\\Http\\Request;\n@@ -75,4 +77,5 @@\n \n         return redirect()->route('contacts.index')->with('success', 'Contacts imported successfully!');\n     }\n }\n+\n"
                },
                {
                    "date": 1739726731809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,10 @@\n \n use App\\Models\\Contact;\n use Illuminate\\Http\\Request;\n use Illuminate\\Support\\Facades\\Validator;\n-use SimpleXMLElement;\n+//use SimpleXMLElement;\n+use XMLReader;\n \n class ContactController extends Controller\n {\n     public function index()\n"
                },
                {
                    "date": 1739726795607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,21 +62,36 @@\n     }\n \n     public function import(Request $request)\n     {\n-        $request->validate([\n-            'xml_file' => 'required|file|mimes:xml',\n-        ]);\n+        $file = $request->file('xml_file');\n \n-        $xml = simplexml_load_file($request->file('xml_file')->path());\n+        $reader = new XMLReader();\n+        $reader->open($file->getPathname());\n \n-        foreach ($xml->contact as $contact) {\n-            Contact::create([\n-                'name' => (string) $contact->name,\n-                'phone' => (string) $contact->phone,\n-            ]);\n+        $batch = [];\n+        while ($reader->read()) {\n+            if ($reader->nodeType == XMLReader::ELEMENT && $reader->name == 'contact') {\n+                $xml = new SimpleXMLElement($reader->readOuterXML());\n+\n+                $batch[] = [\n+                    'name'  => (string) $xml->name,\n+                    'phone' => (string) $xml->phone,\n+                ];\n+\n+                if (count($batch) >= 1000) { // Insert in batches of 1,000\n+                    Contact::insert($batch);\n+                    $batch = [];\n+                }\n+            }\n         }\n+        \n+        if (!empty($batch)) {\n+            Contact::insert($batch);\n+        }\n \n-        return redirect()->route('contacts.index')->with('success', 'Contacts imported successfully!');\n+        $reader->close();\n+\n+        return back()->with('success', 'Contacts imported successfully!');\n     }\n }\n \n"
                },
                {
                    "date": 1739726920545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n \n use App\\Models\\Contact;\n use Illuminate\\Http\\Request;\n use Illuminate\\Support\\Facades\\Validator;\n-//use SimpleXMLElement;\n+use SimpleXMLElement;\n use XMLReader;\n \n class ContactController extends Controller\n {\n"
                },
                {
                    "date": 1739727524333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,16 @@\n         return view('contacts.import');\n     }\n \n     public function import(Request $request)\n-    {\n+    {   \n+        $request->validate([\n+            'xml_file' => 'required|mimes:xml',\n+        ]);\n+    \n+        // Disable query logging for performance\n+        DB::disableQueryLog();\n+\n         $file = $request->file('xml_file');\n \n         $reader = new XMLReader();\n         $reader->open($file->getPathname());\n"
                },
                {
                    "date": 1739727686306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,17 +62,17 @@\n     }\n \n     public function import(Request $request)\n     {   \n-        $request->validate([\n-            'xml_file' => 'required|mimes:xml',\n-        ]);\n-    \n-        // Disable query logging for performance\n+        $file = $request->file('xml_file');\n+\n+        if (!$file) {\n+            return back()->with('error', 'Please upload an XML file.');\n+        }\n+\n+        // Disable query logging to improve performance\n         DB::disableQueryLog();\n \n-        $file = $request->file('xml_file');\n-\n         $reader = new XMLReader();\n         $reader->open($file->getPathname());\n \n         $batch = [];\n@@ -82,23 +82,29 @@\n \n                 $batch[] = [\n                     'name'  => (string) $xml->name,\n                     'phone' => (string) $xml->phone,\n+                    'created_at' => now(), // Add timestamps for efficiency\n+                    'updated_at' => now(),\n                 ];\n \n                 if (count($batch) >= 1000) { // Insert in batches of 1,000\n                     Contact::insert($batch);\n-                    $batch = [];\n+                    $batch = []; // Reset batch\n                 }\n             }\n         }\n-        \n+\n+        // Insert remaining records\n         if (!empty($batch)) {\n             Contact::insert($batch);\n         }\n \n         $reader->close();\n \n+        // Re-enable query logging after import\n+        DB::enableQueryLog();\n+\n         return back()->with('success', 'Contacts imported successfully!');\n     }\n }\n \n"
                },
                {
                    "date": 1739727714739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,11 +4,13 @@\n \n use App\\Models\\Contact;\n use Illuminate\\Http\\Request;\n use Illuminate\\Support\\Facades\\Validator;\n+use Illuminate\\Support\\Facades\\DB;\n use SimpleXMLElement;\n use XMLReader;\n \n+\n class ContactController extends Controller\n {\n     public function index()\n     {\n"
                },
                {
                    "date": 1739728781536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n                     'created_at' => now(), // Add timestamps for efficiency\n                     'updated_at' => now(),\n                 ];\n \n-                if (count($batch) >= 1000) { // Insert in batches of 1,000\n+                if (count($batch) >= 5000) { // Insert in batches of 1,000\n                     Contact::insert($batch);\n                     $batch = []; // Reset batch\n                 }\n             }\n"
                },
                {
                    "date": 1739729021679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,36 +70,52 @@\n         if (!$file) {\n             return back()->with('error', 'Please upload an XML file.');\n         }\n \n+        // Set memory limit and execution time only for this import\n+        ini_set('memory_limit', '1024M'); // Temporary increase for import\n+        ini_set('max_execution_time', 300); // Set 5 minutes only for this request\n+\n         // Disable query logging to improve performance\n         DB::disableQueryLog();\n \n         $reader = new XMLReader();\n         $reader->open($file->getPathname());\n \n         $batch = [];\n-        while ($reader->read()) {\n-            if ($reader->nodeType == XMLReader::ELEMENT && $reader->name == 'contact') {\n-                $xml = new SimpleXMLElement($reader->readOuterXML());\n \n-                $batch[] = [\n-                    'name'  => (string) $xml->name,\n-                    'phone' => (string) $xml->phone,\n-                    'created_at' => now(), // Add timestamps for efficiency\n-                    'updated_at' => now(),\n-                ];\n+        // Begin database transaction\n+        DB::beginTransaction();\n \n-                if (count($batch) >= 5000) { // Insert in batches of 1,000\n-                    Contact::insert($batch);\n-                    $batch = []; // Reset batch\n+        try {\n+            while ($reader->read()) {\n+                if ($reader->nodeType == XMLReader::ELEMENT && $reader->name == 'contact') {\n+                    $xml = new SimpleXMLElement($reader->readOuterXML());\n+\n+                    $batch[] = [\n+                        'name'  => (string) $xml->name,\n+                        'phone' => (string) $xml->phone,\n+                        'created_at' => now(), // Add timestamps for efficiency\n+                        'updated_at' => now(),\n+                    ];\n+\n+                    if (count($batch) >= 5000) { // Insert in batches of 5000\n+                        Contact::insert($batch);\n+                        $batch = []; // Reset batch\n+                    }\n                 }\n             }\n-        }\n \n-        // Insert remaining records\n-        if (!empty($batch)) {\n-            Contact::insert($batch);\n+            // Insert remaining records\n+            if (!empty($batch)) {\n+                Contact::insert($batch);\n+            }\n+\n+            // Commit transaction\n+            DB::commit();\n+        } catch (\\Exception $e) {\n+            DB::rollBack(); // Rollback on error\n+            return back()->with('error', 'Import failed: ' . $e->getMessage());\n         }\n \n         $reader->close();\n \n@@ -107,6 +123,7 @@\n         DB::enableQueryLog();\n \n         return back()->with('success', 'Contacts imported successfully!');\n     }\n+\n }\n \n"
                },
                {
                    "date": 1739729052137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n \n                     $batch[] = [\n                         'name'  => (string) $xml->name,\n                         'phone' => (string) $xml->phone,\n-                        'created_at' => now(), // Add timestamps for efficiency\n+                        'created_at' => now(), \n                         'updated_at' => now(),\n                     ];\n \n                     if (count($batch) >= 5000) { // Insert in batches of 5000\n"
                },
                {
                    "date": 1739729479529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     {\n         return view('contacts.import');\n     }\n \n-    public function import(Request $request)\n+    public function import_1(Request $request)\n     {   \n         $file = $request->file('xml_file');\n \n         if (!$file) {\n@@ -124,6 +124,76 @@\n \n         return back()->with('success', 'Contacts imported successfully!');\n     }\n \n+    public function import(Request $request)\n+    {   \n+        $file = $request->file('xml_file');\n+\n+        if (!$file) {\n+            return back()->with('error', 'Please upload an XML file.');\n+        }\n+\n+        // Set memory limit & execution time only for this request\n+        ini_set('memory_limit', '2048M'); // Increase to 2GB for large files\n+        ini_set('max_execution_time', 600); // 10 minutes\n+\n+        // Disable query log to reduce memory usage\n+        DB::disableQueryLog();\n+\n+        // Open XML file for reading\n+        $reader = new XMLReader();\n+        $reader->open($file->getPathname());\n+\n+        // Begin database transaction\n+        DB::beginTransaction();\n+\n+        try {\n+            $batch = [];\n+            $count = 0;\n+\n+            while ($reader->read()) {\n+                if ($reader->nodeType == XMLReader::ELEMENT && $reader->name == 'contact') {\n+                    $xml = new SimpleXMLElement($reader->readOuterXML());\n+\n+                    $batch[] = [\n+                        'name'  => (string) $xml->name,\n+                        'phone' => (string) $xml->phone,\n+                        'created_at' => now(),\n+                        'updated_at' => now(),\n+                    ];\n+\n+                    $count++;\n+\n+                    // Insert in batches of 10,000\n+                    if ($count % 10000 === 0) {\n+                        DB::table('contacts')->insert($batch);\n+                        $batch = []; // Reset batch\n+\n+                        // Free memory\n+                        flush();\n+                        gc_collect_cycles();\n+                    }\n+                }\n+            }\n+\n+            // Insert remaining records\n+            if (!empty($batch)) {\n+                DB::table('contacts')->insert($batch);\n+            }\n+\n+            // Commit transaction\n+            DB::commit();\n+        } catch (\\Exception $e) {\n+            DB::rollBack();\n+            return back()->with('error', 'Import failed: ' . $e->getMessage());\n+        } finally {\n+            $reader->close();\n+            DB::enableQueryLog(); // Re-enable query logging\n+        }\n+\n+        return back()->with('success', 'Contacts imported successfully!');\n+    }\n+\n+\n }\n \n"
                },
                {
                    "date": 1739729926995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n \n         return back()->with('success', 'Contacts imported successfully!');\n     }\n \n-    public function import(Request $request)\n+    public function import_6sec(Request $request)\n     {   \n         $file = $request->file('xml_file');\n \n         if (!$file) {\n@@ -193,7 +193,89 @@\n \n         return back()->with('success', 'Contacts imported successfully!');\n     }\n \n+    public function import(Request $request)\n+{   \n+    $file = $request->file('xml_file');\n \n+    if (!$file) {\n+        return back()->with('error', 'Please upload an XML file.');\n+    }\n+\n+    // Set PHP memory limit & execution time only for this request\n+    ini_set('memory_limit', '4096M'); // Increase to 4GB for large files\n+    ini_set('max_execution_time', 1200); // 20 minutes\n+\n+    // Disable query logging to improve performance\n+    DB::disableQueryLog();\n+\n+    // Open XML file for streaming\n+    $reader = new XMLReader();\n+    $reader->open($file->getPathname());\n+\n+    // Disable indexes before inserting for better performance\n+    DB::statement('ALTER TABLE contacts DISABLE KEYS');\n+\n+    // Begin transaction\n+    DB::beginTransaction();\n+\n+    try {\n+        $batch = [];\n+        $count = 0;\n+\n+        while ($reader->read()) {\n+            if ($reader->nodeType == XMLReader::ELEMENT && $reader->name == 'contact') {\n+                $xml = new SimpleXMLElement($reader->readOuterXML());\n+\n+                $batch[] = \"('\" . addslashes((string) $xml->name) . \"', '\" . addslashes((string) $xml->phone) . \"', NOW(), NOW())\";\n+\n+                $count++;\n+\n+                // Insert in batches of 50,000\n+                if ($count % 50000 === 0) {\n+                    $this->insertBatch($batch);\n+                    $batch = []; // Reset batch\n+\n+                    // Free memory\n+                    flush();\n+                    gc_collect_cycles();\n+                }\n+            }\n+        }\n+\n+        // Insert remaining records\n+        if (!empty($batch)) {\n+            $this->insertBatch($batch);\n+        }\n+\n+        // Commit transaction\n+        DB::commit();\n+\n+        // Re-enable indexes after inserting\n+        DB::statement('ALTER TABLE contacts ENABLE KEYS');\n+\n+    } catch (\\Exception $e) {\n+        DB::rollBack();\n+        return back()->with('error', 'Import failed: ' . $e->getMessage());\n+    } finally {\n+        $reader->close();\n+        DB::enableQueryLog(); // Re-enable query logging\n+    }\n+\n+    return back()->with('success', 'Contacts imported successfully!');\n }\n \n+/**\n+ * Insert batch using raw SQL for better performance\n+ */\n+private function insertBatch(array $batch)\n+{\n+    if (!empty($batch)) {\n+        $query = \"INSERT INTO contacts (name, phone, created_at, updated_at) VALUES \" . implode(',', $batch);\n+        DB::unprepared($query); // Use raw SQL for faster execution\n+    }\n+}\n+\n+\n+}\n+\n"
                },
                {
                    "date": 1739730180888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n \n         return back()->with('success', 'Contacts imported successfully!');\n     }\n \n-    public function import_6sec(Request $request)\n+    public function import(Request $request)\n     {   \n         $file = $request->file('xml_file');\n \n         if (!$file) {\n@@ -193,89 +193,9 @@\n \n         return back()->with('success', 'Contacts imported successfully!');\n     }\n \n-    public function import(Request $request)\n-{   \n-    $file = $request->file('xml_file');\n+    \n \n-    if (!$file) {\n-        return back()->with('error', 'Please upload an XML file.');\n-    }\n \n-    // Set PHP memory limit & execution time only for this request\n-    ini_set('memory_limit', '4096M'); // Increase to 4GB for large files\n-    ini_set('max_execution_time', 1200); // 20 minutes\n-\n-    // Disable query logging to improve performance\n-    DB::disableQueryLog();\n-\n-    // Open XML file for streaming\n-    $reader = new XMLReader();\n-    $reader->open($file->getPathname());\n-\n-    // Disable indexes before inserting for better performance\n-    DB::statement('ALTER TABLE contacts DISABLE KEYS');\n-\n-    // Begin transaction\n-    DB::beginTransaction();\n-\n-    try {\n-        $batch = [];\n-        $count = 0;\n-\n-        while ($reader->read()) {\n-            if ($reader->nodeType == XMLReader::ELEMENT && $reader->name == 'contact') {\n-                $xml = new SimpleXMLElement($reader->readOuterXML());\n-\n-                $batch[] = \"('\" . addslashes((string) $xml->name) . \"', '\" . addslashes((string) $xml->phone) . \"', NOW(), NOW())\";\n-\n-                $count++;\n-\n-                // Insert in batches of 50,000\n-                if ($count % 50000 === 0) {\n-                    $this->insertBatch($batch);\n-                    $batch = []; // Reset batch\n-\n-                    // Free memory\n-                    flush();\n-                    gc_collect_cycles();\n-                }\n-            }\n-        }\n-\n-        // Insert remaining records\n-        if (!empty($batch)) {\n-            $this->insertBatch($batch);\n-        }\n-\n-        // Commit transaction\n-        DB::commit();\n-\n-        // Re-enable indexes after inserting\n-        DB::statement('ALTER TABLE contacts ENABLE KEYS');\n-\n-    } catch (\\Exception $e) {\n-        DB::rollBack();\n-        return back()->with('error', 'Import failed: ' . $e->getMessage());\n-    } finally {\n-        $reader->close();\n-        DB::enableQueryLog(); // Re-enable query logging\n-    }\n-\n-    return back()->with('success', 'Contacts imported successfully!');\n }\n \n-/**\n- * Insert batch using raw SQL for better performance\n- */\n-private function insertBatch(array $batch)\n-{\n-    if (!empty($batch)) {\n-        $query = \"INSERT INTO contacts (name, phone, created_at, updated_at) VALUES \" . implode(',', $batch);\n-        DB::unprepared($query); // Use raw SQL for faster execution\n-    }\n-}\n-\n-\n-}\n-\n"
                },
                {
                    "date": 1739730238973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     {\n         return view('contacts.import');\n     }\n \n-    public function import_1(Request $request)\n+    public function import(Request $request)\n     {   \n         $file = $request->file('xml_file');\n \n         if (!$file) {\n@@ -124,9 +124,9 @@\n \n         return back()->with('success', 'Contacts imported successfully!');\n     }\n \n-    public function import(Request $request)\n+    public function import_s7e(Request $request)\n     {   \n         $file = $request->file('xml_file');\n \n         if (!$file) {\n@@ -193,9 +193,6 @@\n \n         return back()->with('success', 'Contacts imported successfully!');\n     }\n \n-    \n-\n-\n }\n \n"
                },
                {
                    "date": 1739730365050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     {\n         return view('contacts.import');\n     }\n \n-    public function import(Request $request)\n+    public function import_9_44(Request $request)\n     {   \n         $file = $request->file('xml_file');\n \n         if (!$file) {\n@@ -124,9 +124,9 @@\n \n         return back()->with('success', 'Contacts imported successfully!');\n     }\n \n-    public function import_s7e(Request $request)\n+    public function import(Request $request)\n     {   \n         $file = $request->file('xml_file');\n \n         if (!$file) {\n"
                },
                {
                    "date": 1739730615941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,78 +62,16 @@\n     {\n         return view('contacts.import');\n     }\n \n-    public function import_9_44(Request $request)\n+    public function import_6_08(Request $request)\n     {   \n         $file = $request->file('xml_file');\n \n         if (!$file) {\n             return back()->with('error', 'Please upload an XML file.');\n         }\n \n-        // Set memory limit and execution time only for this import\n-        ini_set('memory_limit', '1024M'); // Temporary increase for import\n-        ini_set('max_execution_time', 300); // Set 5 minutes only for this request\n-\n-        // Disable query logging to improve performance\n-        DB::disableQueryLog();\n-\n-        $reader = new XMLReader();\n-        $reader->open($file->getPathname());\n-\n-        $batch = [];\n-\n-        // Begin database transaction\n-        DB::beginTransaction();\n-\n-        try {\n-            while ($reader->read()) {\n-                if ($reader->nodeType == XMLReader::ELEMENT && $reader->name == 'contact') {\n-                    $xml = new SimpleXMLElement($reader->readOuterXML());\n-\n-                    $batch[] = [\n-                        'name'  => (string) $xml->name,\n-                        'phone' => (string) $xml->phone,\n-                        'created_at' => now(), \n-                        'updated_at' => now(),\n-                    ];\n-\n-                    if (count($batch) >= 5000) { // Insert in batches of 5000\n-                        Contact::insert($batch);\n-                        $batch = []; // Reset batch\n-                    }\n-                }\n-            }\n-\n-            // Insert remaining records\n-            if (!empty($batch)) {\n-                Contact::insert($batch);\n-            }\n-\n-            // Commit transaction\n-            DB::commit();\n-        } catch (\\Exception $e) {\n-            DB::rollBack(); // Rollback on error\n-            return back()->with('error', 'Import failed: ' . $e->getMessage());\n-        }\n-\n-        $reader->close();\n-\n-        // Re-enable query logging after import\n-        DB::enableQueryLog();\n-\n-        return back()->with('success', 'Contacts imported successfully!');\n-    }\n-\n-    public function import(Request $request)\n-    {   \n-        $file = $request->file('xml_file');\n-\n-        if (!$file) {\n-            return back()->with('error', 'Please upload an XML file.');\n-        }\n-\n         // Set memory limit & execution time only for this request\n         ini_set('memory_limit', '2048M'); // Increase to 2GB for large files\n         ini_set('max_execution_time', 600); // 10 minutes\n \n"
                },
                {
                    "date": 1739730888354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,13 @@\n class ContactController extends Controller\n {\n     public function index()\n     {\n-        $contacts = Contact::all();\n+        // Get the 'per_page' value from request, default to 10\n+        $perPage = $request->input('per_page', 10);\n+\n+        // Fetch contacts with pagination\n+        $contacts = Contact::paginate($perPage);\n         return view('contacts.index', compact('contacts'));\n     }\n \n     public function create()\n"
                },
                {
                    "date": 1739731007377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n \n class ContactController extends Controller\n {\n-    public function index()\n+    public function index(Request $request)\n     {\n         // Get the 'per_page' value from request, default to 10\n         $perPage = $request->input('per_page', 10);\n \n"
                },
                {
                    "date": 1739731054491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n         $perPage = $request->input('per_page', 10);\n \n         // Fetch contacts with pagination\n         $contacts = Contact::paginate($perPage);\n-        return view('contacts.index', compact('contacts'));\n+        return view('contacts.index', compact('contacts', 'perPage'));\n     }\n \n     public function create()\n     {\n"
                },
                {
                    "date": 1739732463074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n     {\n         return view('contacts.import');\n     }\n \n-    public function import_6_08(Request $request)\n+    public function import(Request $request)\n     {   \n         $file = $request->file('xml_file');\n \n         if (!$file) {\n"
                },
                {
                    "date": 1739732552222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,8 +133,9 @@\n             DB::enableQueryLog(); // Re-enable query logging\n         }\n \n         return back()->with('success', 'Contacts imported successfully!');\n+        return redirect()->route('contacts.index')->with('success', 'Contact created successfully!');\n     }\n \n }\n \n"
                },
                {
                    "date": 1739732691871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,75 +67,58 @@\n         return view('contacts.import');\n     }\n \n     public function import(Request $request)\n-    {   \n+    {\n         $file = $request->file('xml_file');\n \n         if (!$file) {\n             return back()->with('error', 'Please upload an XML file.');\n         }\n \n-        // Set memory limit & execution time only for this request\n-        ini_set('memory_limit', '2048M'); // Increase to 2GB for large files\n-        ini_set('max_execution_time', 600); // 10 minutes\n+        ini_set('memory_limit', '1024M');\n+        ini_set('max_execution_time', 300);\n \n-        // Disable query log to reduce memory usage\n         DB::disableQueryLog();\n \n-        // Open XML file for reading\n         $reader = new XMLReader();\n         $reader->open($file->getPathname());\n \n-        // Begin database transaction\n+        $batch = [];\n         DB::beginTransaction();\n \n         try {\n-            $batch = [];\n-            $count = 0;\n-\n             while ($reader->read()) {\n                 if ($reader->nodeType == XMLReader::ELEMENT && $reader->name == 'contact') {\n                     $xml = new SimpleXMLElement($reader->readOuterXML());\n \n                     $batch[] = [\n-                        'name'  => (string) $xml->name,\n+                        'name' => (string) $xml->name,\n                         'phone' => (string) $xml->phone,\n                         'created_at' => now(),\n                         'updated_at' => now(),\n                     ];\n \n-                    $count++;\n-\n-                    // Insert in batches of 10,000\n-                    if ($count % 10000 === 0) {\n-                        DB::table('contacts')->insert($batch);\n-                        $batch = []; // Reset batch\n-\n-                        // Free memory\n-                        flush();\n-                        gc_collect_cycles();\n+                    if (count($batch) >= 5000) {\n+                        Contact::insert($batch);\n+                        $batch = [];\n                     }\n                 }\n             }\n \n-            // Insert remaining records\n             if (!empty($batch)) {\n-                DB::table('contacts')->insert($batch);\n+                Contact::insert($batch);\n             }\n \n-            // Commit transaction\n             DB::commit();\n+            $reader->close();\n+\n+            return redirect()->route('contacts.index')->with('success', 'Contacts imported successfully!');\n         } catch (\\Exception $e) {\n             DB::rollBack();\n             return back()->with('error', 'Import failed: ' . $e->getMessage());\n-        } finally {\n-            $reader->close();\n-            DB::enableQueryLog(); // Re-enable query logging\n         }\n-\n-        return back()->with('success', 'Contacts imported successfully!');\n-        // return redirect()->route('contacts.index')->with('success', 'Contact created successfully!');\n     }\n \n+\n }\n \n"
                }
            ],
            "date": 1739721890276,
            "name": "Commit-0",
            "content": "namespace App\\Http\\Controllers;\n\nuse App\\Models\\Contact;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Validator;\nuse SimpleXMLElement;\n\nclass ContactController extends Controller\n{\n    public function index()\n    {\n        $contacts = Contact::all();\n        return view('contacts.index', compact('contacts'));\n    }\n\n    public function create()\n    {\n        return view('contacts.create');\n    }\n\n    public function store(Request $request)\n    {\n        $request->validate([\n            'name' => 'required|string|max:255',\n            'phone' => 'required|string|max:20|unique:contacts,phone',\n        ]);\n\n        Contact::create($request->all());\n\n        return redirect()->route('contacts.index')->with('success', 'Contact created successfully!');\n    }\n\n    public function edit(Contact $contact)\n    {\n        return view('contacts.edit', compact('contact'));\n    }\n\n    public function update(Request $request, Contact $contact)\n    {\n        $request->validate([\n            'name' => 'required|string|max:255',\n            'phone' => 'required|string|max:20|unique:contacts,phone,' . $contact->id,\n        ]);\n\n        $contact->update($request->all());\n\n        return redirect()->route('contacts.index')->with('success', 'Contact updated successfully!');\n    }\n\n    public function destroy(Contact $contact)\n    {\n        $contact->delete();\n        return redirect()->route('contacts.index')->with('success', 'Contact deleted successfully!');\n    }\n\n    public function showImportForm()\n    {\n        return view('contacts.import');\n    }\n\n    public function import(Request $request)\n    {\n        $request->validate([\n            'xml_file' => 'required|file|mimes:xml',\n        ]);\n\n        $xml = simplexml_load_file($request->file('xml_file')->path());\n\n        foreach ($xml->contact as $contact) {\n            Contact::create([\n                'name' => (string) $contact->name,\n                'phone' => (string) $contact->phone,\n            ]);\n        }\n\n        return redirect()->route('contacts.index')->with('success', 'Contacts imported successfully!');\n    }\n}\n"
        }
    ]
}